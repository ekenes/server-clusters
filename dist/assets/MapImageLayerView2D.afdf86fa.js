var M=Object.defineProperty,_=Object.defineProperties;var q=Object.getOwnPropertyDescriptors;var I=Object.getOwnPropertySymbols;var A=Object.prototype.hasOwnProperty,$=Object.prototype.propertyIsEnumerable;var S=(i,e,t)=>e in i?M(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,u=(i,e)=>{for(var t in e||(e={}))A.call(e,t)&&S(i,t,e[t]);if(I)for(var t of I(e))$.call(e,t)&&S(i,t,e[t]);return i},P=(i,e)=>_(i,q(e));import{X as s,Z as g,Y as p,f_ as F,e as T,r as f,gm as L,cg as H,df as R,s as D,gf as B,h as O}from"./vendor.1906794a.js";import{t as z}from"./BitmapContainer.2584eaf7.js";import{l as N,u as Q}from"./LayerView.31466adc.js";import{t as W,i as k}from"./BaseGraphicContainer.d5f8ca0a.js";import{I as K}from"./Utils.dc5734bd.js";import{S as X}from"./ExportStrategy.97aeb84b.js";import{c as Y}from"./ExportImageParameters.20762b1a.js";import{s as Z,a as J}from"./drapedUtils.11fab57e.js";import{t as ee,d as te}from"./popupUtils.10e4a4b8.js";import{i as ie}from"./RefreshableLayerView.cc10fb38.js";import"./WGLContainer.85960f9a.js";import"./definitions.21e97413.js";import"./VertexArrayObject.fb67875c.js";import"./Texture.e5002286.js";import"./ShaderCompiler.c7c7b63f.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.301bf49f.js";import"./pixelUtils.e90a335a.js";import"./Container.3129b529.js";import"./earcut.f20dd8d8.js";import"./CIMSymbolHelper.96d440ee.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./projectionSupport.e16039e3.js";import"./json.2d0d6862.js";import"./FeatureContainer.76fc9ec8.js";import"./TileContainer.26dac650.js";import"./visualVariablesUtils.c887ba43.js";import"./visualVariablesUtils.a2feeb91.js";import"./Matcher.a4434050.js";import"./tileUtils.38de3c83.js";import"./TileClipper.37214276.js";import"./cimSymbolUtils.6ee77631.js";import"./quantizationUtils.f38724ee.js";import"./devEnvironmentUtils.444b8fd1.js";import"./schemaUtils.a83c8525.js";import"./MD5.f9440c6b.js";import"./util.aa5f648b.js";import"./ComputedAttributeStorage.1ad4cf86.js";import"./FeatureSetReader.deb82ddc.js";import"./centroid.4d0eaa21.js";import"./vec3f32.9cc42d31.js";import"./Bitmap.7420dc51.js";import"./sublayerUtils.5227ee88.js";let y=class extends W{renderChildren(i){if(i.drawPhase!==K.HIGHLIGHT||(this.attributeView.bindTextures(i.context),!this.children.some(a=>a.hasData)))return;super.renderChildren(i);const{painter:e}=i,t=e.effects.highlight;t.bind(i),i.context.setColorMask(!0,!0,!0,!0),i.context.clear(16384),this._renderChildren(i,t.defines.concat(["highlightAll"])),t.draw(i),t.unbind()}};y=s([g("esri.views.2d.layers.support.HighlightGraphicContainer")],y);const re=y,ae=i=>{let e=class extends i{initialize(){this.exportImageParameters=new Y({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get exportImageVersion(){var t;return(t=this.exportImageParameters)==null||t.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}async fetchPopupFeatures(t,a){const{layer:l}=this;if(!t)return Promise.reject(new T("mapimagelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:l}));const h=this.get("view.scale"),j=[],v=async r=>{const n=r.minScale===0||h<=r.minScale,o=r.maxScale===0||h>=r.maxScale;if(r.visible&&n&&o){if(r.sublayers)r.sublayers.forEach(v);else if(r.popupEnabled){const d=te(r,P(u({},a),{defaultPopupTemplateEnabled:!1}));f(d)&&j.unshift({sublayer:r,popupTemplate:d})}}},E=l.sublayers.toArray().reverse().map(v);await Promise.all(E);const V=j.map(async({sublayer:r,popupTemplate:n})=>{await r.load().catch(()=>{});const o=r.createQuery(),d=f(a)?a.event:null,b=Z({renderer:r.renderer,event:d}),w=this.createFetchPopupFeaturesQueryGeometry(t,b);if(o.geometry=w,o.outFields=await ee(r,n),this.layer.type==="map-image"&&"floors"in this.view){var x,C;const G=(x=this.view)==null||(C=x.floors)==null?void 0:C.clone(),c=L(G,r);f(c)&&(o.where=o.where?`(${o.where}) AND (${c})`:c)}const U=await this._loadArcadeModules(n);return U&&U.arcadeUtils.hasGeometryOperations(n)||(o.maxAllowableOffset=w.width/b),(await r.queryFeatures(o)).features});return(await H(V)).reduce((r,n)=>n.value?[...r,...n.value]:r,[]).filter(r=>r!=null)}canResume(){var t;return!!super.canResume()&&((t=this.timeExtent)==null||!t.isEmpty)}_loadArcadeModules(t){if(t.get("expressionInfos.length")||Array.isArray(t.content)&&t.content.some(a=>a.type==="expression"))return R()}};return s([p()],e.prototype,"exportImageParameters",void 0),s([p({readOnly:!0})],e.prototype,"exportImageVersion",null),s([p()],e.prototype,"layer",void 0),s([p()],e.prototype,"suspended",void 0),s([p(F)],e.prototype,"timeExtent",void 0),e=s([g("esri.views.layers.MapImageLayerView")],e),e},se=D.getLogger("esri.views.2d.layers.MapImageLayerView2D");let m=class extends ae(ie(N(Q))){constructor(){super(...arguments),this._highlightGraphics=new B}update(i){this.strategy.update(i).catch(e=>{O(e)||se.error(e)})}attach(){const{imageMaxWidth:i,imageMaxHeight:e,version:t}=this.layer,a=t>=10.3,l=t>=10;this._bitmapContainer=new z,this.container.addChild(this._bitmapContainer);const h=new k({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new re(this.view.featuresTilingScheme)});this.container.addChild(h.container),this.strategy=new X({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:i,imageMaxHeight:e,imageRotationSupported:a,imageNormalizationSupported:l,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",()=>this.requestUpdate()),"exportImageVersion"),this.handles.add(this.watch("view.floors",()=>this.requestUpdate()),"view.floors"),this.requestUpdate()}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(i,e){return this._highlightGraphics.add(i),{remove:()=>{this._highlightGraphics.remove(i)}}}createFetchPopupFeaturesQueryGeometry(i,e){return J(i,e,this.view)}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(i,e,t,a){return this.layer.fetchImage(i,e,t,u({timeExtent:this.timeExtent,floors:this.view.floors},a))}};s([p()],m.prototype,"strategy",void 0),s([p()],m.prototype,"updating",void 0),m=s([g("esri.views.2d.layers.MapImageLayerView2D")],m);const Ze=m;export{Ze as default};
