import{H as o,cv as y,ci as d,gc as f,gd as g,bE as l,X as j,Z as b}from"./vendor.1906794a.js";import{l as u,u as w}from"./LayerView.31466adc.js";import{i as S}from"./GraphicContainer.33c8eea2.js";import{i as V}from"./BaseGraphicContainer.d5f8ca0a.js";import"./Container.3129b529.js";import"./Utils.dc5734bd.js";import"./Texture.e5002286.js";import"./CIMSymbolHelper.96d440ee.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./projectionSupport.e16039e3.js";import"./json.2d0d6862.js";import"./VertexArrayObject.fb67875c.js";import"./FeatureContainer.76fc9ec8.js";import"./TileContainer.26dac650.js";import"./WGLContainer.85960f9a.js";import"./ShaderCompiler.c7c7b63f.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.301bf49f.js";import"./pixelUtils.e90a335a.js";import"./earcut.f20dd8d8.js";import"./visualVariablesUtils.c887ba43.js";import"./visualVariablesUtils.a2feeb91.js";import"./Matcher.a4434050.js";import"./tileUtils.38de3c83.js";import"./TileClipper.37214276.js";import"./cimSymbolUtils.6ee77631.js";import"./quantizationUtils.f38724ee.js";import"./devEnvironmentUtils.444b8fd1.js";import"./schemaUtils.a83c8525.js";import"./MD5.f9440c6b.js";import"./util.aa5f648b.js";import"./ComputedAttributeStorage.1ad4cf86.js";import"./FeatureSetReader.deb82ddc.js";import"./centroid.4d0eaa21.js";import"./vec3f32.9cc42d31.js";let n=class extends u(w){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,s){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,t)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[t]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const s of this.graphicsViews)s.processUpdate(e)}attach(){this.handles.add([o(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:s,featureSet:p,layerDefinition:i}of e){const t=y.fromJSON(p),m=new d(t.features),c=i.drawingInfo,h=s?f.fromJSON(s):null,r=g(c.renderer),a=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:m,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[t.geometryType]=a,this._popupTemplates.set(a,h),t.geometryType!=="polygon"||this.layer.polygonSymbol?t.geometryType!=="polyline"||this.layer.lineSymbol?t.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(a),this.container.addChild(a.container)}}),o(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),o(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),o(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};n=j([b("esri.views.2d.layers.GeoRSSLayerView2D")],n);const pe=n;export{pe as default};
