var S=Object.defineProperty,b=Object.defineProperties;var T=Object.getOwnPropertyDescriptors;var d=Object.getOwnPropertySymbols;var V=Object.prototype.hasOwnProperty,v=Object.prototype.propertyIsEnumerable;var p=(e,t,i)=>t in e?S(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,y=(e,t)=>{for(var i in t||(t={}))V.call(t,i)&&p(e,i,t[i]);if(d)for(var i of d(t))v.call(t,i)&&p(e,i,t[i]);return e},m=(e,t)=>b(e,T(t));import{s as x,ft as j,fQ as M,fR as q,bl as _,h,X as n,Y as w,Z as C}from"./vendor.1906794a.js";import{r as R,n as g}from"./imageUtils.ac363169.js";import{l as Q,u as L}from"./LayerView.31466adc.js";import{i as U}from"./RefreshableLayerView.cc10fb38.js";import"./BitmapTileContainer.6b4f7dfa.js";import"./Bitmap.7420dc51.js";import"./Container.3129b529.js";import"./Texture.e5002286.js";import"./TileContainer.26dac650.js";import"./Utils.dc5734bd.js";import"./WGLContainer.85960f9a.js";import"./definitions.21e97413.js";import"./VertexArrayObject.fb67875c.js";import"./ShaderCompiler.c7c7b63f.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.301bf49f.js";import"./pixelUtils.e90a335a.js";import"./earcut.f20dd8d8.js";const k=[102113,102100,3857,3785,900913],B=[0,0],W=x.getLogger("esri.views.2d.layers.WMTSLayerView2D");let a=class extends U(R(Q(L))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this._tileRequests=new Map,this.layer=null}get tileMatrixSet(){if(this.layer.activeLayer.tileMatrixSetId)return this.layer.activeLayer.tileMatrixSet;const e=this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);return e?(this.layer.activeLayer.tileMatrixSetId=e.id,e):null}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this.notifyChange("updating")}attach(){if(!this.tileMatrixSet)return;const{tileInfo:e}=this.tileMatrixSet;this._tileInfoView=new j(e),this._fetchQueue=new M({tileInfoView:this._tileInfoView,concurrency:16,process:(t,i)=>this.fetchTile(t,i)}),this._tileStrategy=new q({cachePolicy:"keep",resampling:!0,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.handles.add(this.watch(["layer.activeLayer.styleId","tileMatrixSet"],()=>this._refresh()),this.declaredClass),super.attach()}detach(){var e,t;super.detach(),this.handles.remove(this.declaredClass),(e=this._tileStrategy)==null||e.destroy(),(t=this._fetchQueue)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(B,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}async doRefresh(){this.updateRequested||this.suspended||this._refresh()}isUpdating(){return this._fetchQueue.length>0}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:s,resamplingLevel:o=0}=t;if(!i)return this._fetchImage(e,s);const r=new _(0,0,0,0);let c;try{await i.fetchAvailabilityUpsample(e.level,e.row,e.col,r,{signal:s}),c=await this._fetchImage(r,s)}catch(l){if(h(l))throw l;if(o<3){const u=this._tileInfoView.getTileParentId(e.id);if(u){const f=new _(u),I=await this.fetchTile(f,m(y({},t),{resamplingLevel:o+1}));return g(this._tileInfoView,I,f,e)}}throw l}return g(this._tileInfoView,c,r,e)}canResume(){const e=super.canResume();return e&&this.tileMatrixSet!==null}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){h(t)||W.error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{signal:t})}_refresh(){this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(e=>{if(!e.bitmap.source)return;const t={id:e.key.id,fulfilled:!1,promise:this._fetchQueue.push(e.key).then(i=>{e.bitmap.source=i}).catch(i=>{h(i)||(e.bitmap.source=null)}).finally(()=>{e.requestRender(),this.notifyChange("updating"),t.fulfilled=!0})};this._tileRequests.set(e,t)}),this.notifyChange("updating")}_getTileMatrixSetBySpatialReference(e){const t=this.view.spatialReference;if(!e.tileMatrixSets)return null;let i=e.tileMatrixSets.find(s=>s.tileInfo.spatialReference.wkid===t.wkid);return!i&&t.isWebMercator&&(i=e.tileMatrixSets.find(s=>k.indexOf(s.tileInfo.spatialReference.wkid)>-1)),i}};n([w()],a.prototype,"suspended",void 0),n([w({readOnly:!0})],a.prototype,"tileMatrixSet",null),a=n([C("esri.views.2d.layers.WMTSLayerView2D")],a);const ae=a;export{ae as default};
