var y=Object.defineProperty,m=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var P=Object.prototype.hasOwnProperty,C=Object.prototype.propertyIsEnumerable;var d=(r,t,e)=>t in r?y(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e,c=(r,t)=>{for(var e in t||(t={}))P.call(t,e)&&d(r,e,t[e]);if(u)for(var e of u(t))C.call(t,e)&&d(r,e,t[e]);return r},p=(r,t)=>m(r,g(t));import{du as b,aj as G,f6 as v,b as M,aO as A,cY as T,bM as R,bJ as x,f7 as k,f8 as Z,f9 as w}from"./vendor.1906794a.js";class F{constructor(t,e,s){this.uid=t,this.geometry=e,this.attributes=s,this.visible=!0,this.objectId=null,this.centroid=null}}class L{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}b();G();function B(r,t){return t}function h(r,t,e,s){switch(e){case 0:return a(r,t+s,0);case 1:return r.originPosition==="lowerLeft"?a(r,t+s,1):S(r,t+s,1)}}function f(r,t,e,s){return e===2?a(r,t,2):h(r,t,e,s)}function I(r,t,e,s){return e===2?a(r,t,3):h(r,t,e,s)}function N(r,t,e,s){return e===3?a(r,t,3):f(r,t,e,s)}function a({translate:r,scale:t},e,s){return r[s]+e*t[s]}function S({translate:r,scale:t},e,s){return r[s]-e*t[s]}class D{constructor(t){this.options=t,this.geometryTypes=["point","multipoint","polyline","polygon"],this.previousCoordinate=[0,0],this.transform=null,this.applyTransform=B,this.lengths=[],this.currentLengthIndex=0,this.toAddInCurrentPath=0,this.vertexDimension=0,this.coordinateBuffer=null,this.coordinateBufferPtr=0,this.AttributesConstructor=function(){}}createFeatureResult(){return new L}finishFeatureResult(t){if(this.options.applyTransform&&(t.transform=null),this.AttributesConstructor=function(){},this.coordinateBuffer=null,this.lengths.length=0,!t.hasZ)return;const e=v(t.geometryType,this.options.sourceSpatialReference,t.spatialReference);if(!M(e))for(const s of t.features)e(s.geometry)}createSpatialReference(){return new A}addField(t,e){t.fields.push(T.fromJSON(e));const s=t.fields.map(i=>i.name);this.AttributesConstructor=function(){for(const i of s)this[i]=null}}addFeature(t,e){const s=this.options.maxStringAttributeLength?this.options.maxStringAttributeLength:0;if(s>0)for(const i in e.attributes){const o=e.attributes[i];typeof o=="string"&&o.length>s&&(e.attributes[i]="")}t.features.push(e)}addQueryGeometry(t,e){const{queryGeometry:s,queryGeometryType:i}=e,o=R(s.clone(),s,!1,!1,this.transform),l=x(o,i,!1,!1);let n=null;switch(i){case"esriGeometryPoint":n="point";break;case"esriGeometryPolygon":n="polygon";break;case"esriGeometryPolyline":n="polyline";break;case"esriGeometryMultipoint":n="multipoint"}l.type=n,t.queryGeometryType=i,t.queryGeometry=l}prepareFeatures(t){switch(this.transform=t.transform,this.options.applyTransform&&t.transform&&(this.applyTransform=this.deriveApplyTransform(t)),this.vertexDimension=2,t.hasZ&&this.vertexDimension++,t.hasM&&this.vertexDimension++,t.geometryType){case"point":this.addCoordinate=(e,s,i)=>this.addCoordinatePoint(e,s,i),this.createGeometry=e=>this.createPointGeometry(e);break;case"polygon":this.addCoordinate=(e,s,i)=>this.addCoordinatePolygon(e,s,i),this.createGeometry=e=>this.createPolygonGeometry(e);break;case"polyline":this.addCoordinate=(e,s,i)=>this.addCoordinatePolyline(e,s,i),this.createGeometry=e=>this.createPolylineGeometry(e);break;case"multipoint":this.addCoordinate=(e,s,i)=>this.addCoordinateMultipoint(e,s,i),this.createGeometry=e=>this.createMultipointGeometry(e);break;case"mesh":case"extent":break;default:k(t.geometryType)}}createFeature(){return this.lengths.length=0,this.currentLengthIndex=0,this.previousCoordinate[0]=0,this.previousCoordinate[1]=0,new F(Z(),null,new this.AttributesConstructor)}allocateCoordinates(){const t=this.lengths.reduce((e,s)=>e+s,0);this.coordinateBuffer=new Float64Array(t*this.vertexDimension),this.coordinateBufferPtr=0}addLength(t,e,s){this.lengths.length===0&&(this.toAddInCurrentPath=e),this.lengths.push(e)}createPointGeometry(t){const e={type:"point",x:0,y:0,spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM};return e.hasZ&&(e.z=0),e.hasM&&(e.m=0),e}addCoordinatePoint(t,e,s){switch(e=this.applyTransform(this.transform,e,s,0),s){case 0:t.x=e;break;case 1:t.y=e;break;case 2:t.hasZ?t.z=e:t.m=e;break;case 3:t.m=e}}transformPathLikeValue(t,e){let s=0;return e<=1&&(s=this.previousCoordinate[e],this.previousCoordinate[e]+=t),this.applyTransform(this.transform,t,e,s)}addCoordinatePolyline(t,e,s){this.dehydratedAddPointsCoordinate(t.paths,e,s)}addCoordinatePolygon(t,e,s){this.dehydratedAddPointsCoordinate(t.rings,e,s)}addCoordinateMultipoint(t,e,s){s===0&&t.points.push([]);const i=this.transformPathLikeValue(e,s);t.points[t.points.length-1].push(i)}createPolygonGeometry(t){return{type:"polygon",rings:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}createPolylineGeometry(t){return{type:"polyline",paths:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}createMultipointGeometry(t){return{type:"multipoint",points:[],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}dehydratedAddPointsCoordinate(t,e,s){s===0&&this.toAddInCurrentPath--==0&&(t.push([]),this.toAddInCurrentPath=this.lengths[++this.currentLengthIndex]-1,this.previousCoordinate[0]=0,this.previousCoordinate[1]=0);const i=this.transformPathLikeValue(e,s),o=t[t.length-1];s===0&&o.push(new Float64Array(this.coordinateBuffer.buffer,this.coordinateBufferPtr*Float64Array.BYTES_PER_ELEMENT,this.vertexDimension)),this.coordinateBuffer[this.coordinateBufferPtr++]=i}deriveApplyTransform(t){const{hasZ:e,hasM:s}=t;return e&&s?N:e?f:s?I:h}}class j{_parseFeatureQuery(t){const e=w(t.buffer,new D(t.options)),s=p(c({},e),{spatialReference:e.spatialReference.toJSON(),fields:e.fields?e.fields.map(i=>i.toJSON()):void 0});return Promise.resolve(s)}}function J(){return new j}export{J as default};
