var u=Object.defineProperty,p=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var m=Object.getOwnPropertySymbols;var b=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable;var c=(o,e,t)=>e in o?u(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,f=(o,e)=>{for(var t in e||(e={}))b.call(e,t)&&c(o,t,e[t]);if(m)for(var t of m(e))h.call(e,t)&&c(o,t,e[t]);return o},d=(o,e)=>p(o,S(e));import{r as n,cB as l,fC as x}from"./vendor.1906794a.js";import{u as a,s as y,v as N,y as O,B as J}from"./pixelUtils.e90a335a.js";import{P as v,N as P}from"./RasterSymbolizer.bac71b91.js";import{x as B,d as g,L as j}from"./rasterProjectionHelper.cfe5d2ba.js";import{f as z,c as w}from"./dataUtils.12e2ccde.js";import{f as k}from"./utils.624dcb6b.js";import"./LercCodec.8d8e52b5.js";import"./colorUtils.c7035b36.js";class F{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),s=z(t,e.type);return Promise.resolve(n(s)&&s.toJSON())}async decode(e){const t=await v(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?l.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(n(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=P.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(n(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=y(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=N(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,r)=>{t.set(r,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(i=>i?new a(i):null),s=O(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo});if(!e.coefs)return s&&s.toJSON();const r=J(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return r&&r.toJSON()}async createStreamlinesMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),width:e.flowData.width,height:e.flowData.height},{vertexData:r,indexData:i}=await w(e.rendererSettings,s,t.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:i.buffer},transferList:[r.buffer,i.buffer]}}async getProjectionOffsetGrid(e){const t=l.fromJSON(e.projectedExtent),s=l.fromJSON(e.srcBufferExtent);let r=null;e.datumTransformationStemps&&(r=new x({steps:e.datumTransformationStemps})),B(t.spatialReference,s.spatialReference,r)&&await g();const i=e.rasterTransform?k(e.rasterTransform):null;return j(d(f({},e),{projectedExtent:t,srcBufferExtent:s,datumTransformation:r,rasterTransform:i}))}}export{F as default};
