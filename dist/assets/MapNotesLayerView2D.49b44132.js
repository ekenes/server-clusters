import{r as p,cu as u,ci as f,H as n,fV as g,b as w,X as j,Z as y}from"./vendor.1906794a.js";import{l as b,u as V}from"./LayerView.31466adc.js";import{i as l}from"./GraphicContainer.33c8eea2.js";import{i as d}from"./BaseGraphicContainer.d5f8ca0a.js";import"./Container.3129b529.js";import"./Utils.dc5734bd.js";import"./Texture.e5002286.js";import"./CIMSymbolHelper.96d440ee.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./projectionSupport.e16039e3.js";import"./json.2d0d6862.js";import"./VertexArrayObject.fb67875c.js";import"./FeatureContainer.76fc9ec8.js";import"./TileContainer.26dac650.js";import"./WGLContainer.85960f9a.js";import"./ShaderCompiler.c7c7b63f.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.301bf49f.js";import"./pixelUtils.e90a335a.js";import"./earcut.f20dd8d8.js";import"./visualVariablesUtils.c887ba43.js";import"./visualVariablesUtils.a2feeb91.js";import"./Matcher.a4434050.js";import"./tileUtils.38de3c83.js";import"./TileClipper.37214276.js";import"./cimSymbolUtils.6ee77631.js";import"./quantizationUtils.f38724ee.js";import"./devEnvironmentUtils.444b8fd1.js";import"./schemaUtils.a83c8525.js";import"./MD5.f9440c6b.js";import"./util.aa5f648b.js";import"./ComputedAttributeStorage.1ad4cf86.js";import"./FeatureSetReader.deb82ddc.js";import"./centroid.4d0eaa21.js";import"./vec3f32.9cc42d31.js";const m="sublayers",c="layerView",C=Object.freeze({remove(){},pause(){},resume(){}});let h=class extends b(V){async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),t=>t.hitTest(e).filter(i=>!!i.popupTemplate)).flat()}*graphicsViews(){p(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():p(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(e,t){const i=Array.from(this.graphicsViews(),async r=>{const a=await r.hitTest(e);if(p(this._graphicsViewsFeatureCollectionMap)){const s=this._graphicsViewsFeatureCollectionMap.get(r);for(const o of a)!o.popupTemplate&&s.popupTemplate&&(o.popupTemplate=s.popupTemplate)}return a});return(await Promise.all(i)).flat()}highlight(e){let t;if(typeof e=="number"?t=[e]:e instanceof u?t=[e.uid]:Array.isArray(e)&&e.length>0?t=typeof e[0]=="number"?e:e.map(i=>i&&i.uid):f.isCollection(e)&&(t=e.map(i=>i&&i.uid).toArray()),t=t.filter(i=>i!=null),!t.length)return C;for(const i of this.graphicsViews())i.addHighlight(t);return{remove:()=>{for(const i of this.graphicsViews())i.removeHighlight(t)}}}update(e){for(const t of this.graphicsViews())t.processUpdate(e)}attach(){const e=this.view,t=()=>this.requestUpdate(),i=this.layer.featureCollections;if(p(i)&&i.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of i){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new d({view:e,graphics:r.source,renderer:r.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(s,r),this.container.addChild(s.container),this.handles.add([n(r,"visible",o=>s.container.visible=o),n(s,"updating",()=>this.notifyChange("updating"))],c)}}else p(this.layer.sublayers)&&this.handles.add(g(this.layer,"sublayers","change",()=>this._createGraphicsViews(),()=>this._createGraphicsViews(),()=>this._destroyGraphicsViews()),m)}detach(){this._destroyGraphicsViews(),this.handles.remove(m)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(c);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),w(this.layer.sublayers))return;const e=[],t=this.view,i=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new d({view:t,graphics:r.graphics,requestUpdateCallback:i,container:a});this.handles.add([r.on("graphic-update",s.graphicUpdateHandler),n(r,"visible",o=>s.container.visible=o),n(s,"updating",()=>this.notifyChange("updating"))],c),this.container.addChild(s.container),e.push(s)}this._graphicsViews=e}};h=j([y("esri.views.2d.layers.MapNotesLayerView2D")],h);const pe=h;export{pe as default};
