var q=Object.defineProperty,G=Object.defineProperties;var x=Object.getOwnPropertyDescriptors;var C=Object.getOwnPropertySymbols;var H=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable;var $=(t,e,r)=>e in t?q(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,l=(t,e)=>{for(var r in e||(e={}))H.call(e,r)&&$(t,r,e[r]);if(C)for(var r of C(e))b.call(e,r)&&$(t,r,e[r]);return t},f=(t,e)=>G(t,x(e));import{cw as m,cC as T,C as p,bz as L,cc as I,aw as _,cb as h,X as N,Y as y,Z as A,cV as J,ce as w,cr as j,b$ as Y,cy as F}from"./vendor.1906794a.js";import{r as E,o as K,n as B}from"./project.0555f2b0.js";async function k(t,e,r){const i=m(t),s=l(f(l({},i.query),{f:"json"}),e.toJSON()),o=T(s,r);return p(i.path+"/areasAndLengths",o).then(a=>a.data)}async function P(t,e,r,i){const s=e[0].spatialReference,o=m(t),a=f(l({},o.query),{f:"json",sr:JSON.stringify(s.toJSON()),polygons:JSON.stringify(E(e).geometries),polylines:JSON.stringify(E(r).geometries)}),c=T(a,i);return p(o.path+"/autoComplete",c).then(({data:u})=>(u.geometries||[]).map(({rings:g})=>new L({spatialReference:s,rings:g})))}async function Q(t,e,r){const i=m(t),s=l(f(l({},i.query),{f:"json"}),e.toJSON()),o=e.outSpatialReference||e.geometries[0].spatialReference,a=T(s,r);return p(i.path+"/buffer",a).then(c=>(c.data.geometries||[]).map(({rings:u})=>new L({spatialReference:o,rings:u})))}async function V(t,e,r){const i=e[0].spatialReference,s=m(t),o=f(l({},s.query),{f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(E(e))}),a=T(o,r);return p(s.path+"/convexHull",a).then(({data:c})=>I(c.geometry).set({spatialReference:i}))}async function z(t,e,r,i){const s=m(t),o=e[0].spatialReference,a=f(l({},i),{query:f(l({},s.query),{f:"json",sr:JSON.stringify(o),target:JSON.stringify({geometryType:_(e[0]),geometries:e}),cutter:JSON.stringify(r)})}),c=await p(s.path+"/cut",a),{cutIndexes:u,geometries:g=[]}=c.data;return{cutIndexes:u,geometries:g.map(v=>{const D=I(v);return D.spatialReference=o,D})}}async function W(t,e,r){const i=e.geometries[0].spatialReference,s=m(t),o=l(f(l({},s.query),{f:"json"}),e.toJSON()),a=T(o,r);return p(s.path+"/densify",a).then(({data:c})=>(c.geometries||[]).map(u=>I(u).set({spatialReference:i})))}async function X(t,e,r,i){const s=e[0].spatialReference,o=m(t);let a={query:f(l({},o.query),{f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(E(e)),geometry:JSON.stringify({geometryType:_(r),geometry:r.toJSON()})})};return i&&(a=l(l({},i),a)),p(o.path+"/difference",a).then(({data:c})=>(c.geometries||[]).map(u=>I(u).set({spatialReference:s})))}async function Z(t,e,r){const i=m(t),s=l(f(l({},i.query),{f:"json"}),e.toJSON()),o=T(s,r);return p(i.path+"/distance",o).then(({data:a})=>a&&a.distance)}const M=new h({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"});async function ee(t,e,r){const i={};e.sr!=null&&typeof e.sr=="object"?i.sr=e.sr.wkid||JSON.stringify(e.sr):i.sr=e.sr,i.strings=JSON.stringify(e.strings);const s=e.conversionType||"mgrs";i.conversionType=M.toJSON(s),i.conversionMode=e.conversionMode;const o=m(t),a=l(f(l({},o.query),{f:"json"}),i),c=T(a,r);return p(o.path+"/fromGeoCoordinateString",c).then(({data:u})=>u.coordinates)}let R=class extends w{constructor(t){super(t),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};N([y({type:String,json:{write:!0}})],R.prototype,"deviationUnit",void 0),N([y({json:{read:{reader:t=>t?t.map(e=>I(e)):null},write:{writer:(t,e)=>{e.geometries=t.map(r=>r.toJSON())}}}})],R.prototype,"geometries",void 0),N([y({type:Number,json:{write:!0}})],R.prototype,"maxDeviation",void 0),R=N([A("esri.rest.support.GeneralizeParameters")],R),R.from=J(R);const te=R,re=new h({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});function ne(t){const{geometries:e,deviationUnit:r,maxDeviation:i}=t.toJSON(),s={maxDeviation:i};return e&&e.length&&(s.geometries=JSON.stringify({geometryType:_(e[0]),geometries:e}),s.sr=JSON.stringify(e[0].spatialReference)),re.write(r,s,"deviationUnit"),s}async function se(t,e,r){const i=(e=te.from(e)).toJSON(),s=ne(e),o=m(t),a=l(f(l({},o.query),{f:"json"}),s),c=i.geometries[0].spatialReference,u=T(a,r);return p(o.path+"/generalize",u).then(({data:g})=>(g.geometries||[]).map(v=>I(v).set({spatialReference:c})))}async function ie(t,e,r,i){const s=e[0].spatialReference,o=m(t),a=f(l({},o.query),{f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(E(e)),geometry:JSON.stringify({geometryType:_(r),geometry:r.toJSON()})}),c=T(a,i);return p(o.path+"/intersect",c).then(({data:u})=>(u.geometries||[]).map(g=>I(g).set({spatialReference:s})))}function oe(t,e,r){const i=e.map(u=>u.toJSON()),s=e[0].spatialReference,o=m(t),a=f(l({},o.query),{f:"json",sr:s.wkid?s.wkid:JSON.stringify(s.toJSON()),polygons:JSON.stringify(i)}),c=T(a,r);return p(o.path+"/labelPoints",c).then(({data:u})=>(u.labelPoints||[]).map(g=>I(g).set({spatialReference:s})))}let S=class extends w{constructor(t){super(t),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};N([y({type:String,json:{write:!0}})],S.prototype,"calculationType",void 0),N([y({type:Boolean,json:{write:!0}})],S.prototype,"geodesic",void 0),N([y({json:{write:!0}})],S.prototype,"lengthUnit",void 0),N([y({type:[j],json:{read:{reader:t=>t?t.map(e=>I(e)):null},write:{writer:(t,e)=>{e.polylines=t.map(r=>r.toJSON())}}}})],S.prototype,"polylines",void 0),S=N([A("esri.rest.support.LengthsParameters")],S),S.from=J(S);const ae=S,le=new h({preserveShape:"preserve-shape"});function ce(t){const{polylines:e,lengthUnit:r,geodesic:i,calculationType:s}=t.toJSON(),o={};o.polylines=JSON.stringify(e);const a=t.polylines[0].spatialReference;return o.sr=a.wkid?a.wkid:JSON.stringify(a.toJSON()),r&&(o.lengthUnit=r),i&&(o.geodesic=i),s&&(o.calculationType=le.toJSON(s)),o}async function ue(t,e,r){e=ae.from(e);const i=ce(e),s=m(t),o=l(f(l({},s.query),{f:"json"}),i),a=T(o,r);return p(s.path+"/lengths",a).then(({data:c})=>c)}let d=class extends w{constructor(t){super(t),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};N([y({type:Number,json:{write:!0}})],d.prototype,"bevelRatio",void 0),N([y({json:{read:{reader:t=>t?t.map(e=>I(e)):null},write:{writer:(t,e)=>{e.geometries=t.map(r=>r.toJSON())}}}})],d.prototype,"geometries",void 0),N([y({type:Number,json:{write:!0}})],d.prototype,"offsetDistance",void 0),N([y({type:String,json:{write:!0}})],d.prototype,"offsetHow",void 0),N([y({type:String,json:{write:!0}})],d.prototype,"offsetUnit",void 0),d=N([A("esri.rest.support.OffsetParameters")],d),d.from=J(d);const Ne=d,fe=new h({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),pe=new h({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});function ye(t){const{geometries:e,bevelRatio:r,offsetDistance:i,offsetHow:s,offsetUnit:o}=t.toJSON(),a={bevelRatio:r,offsetDistance:i};return e&&e.length&&(a.geometries=JSON.stringify({geometryType:_(e[0]),geometries:e}),a.sr=JSON.stringify(e[0].spatialReference)),s&&(a.offsetHow=fe.toJSON(s)),o&&(a.offsetUnit=pe.toJSON(o)),a}async function me(t,e,r){e=Ne.from(e);const i=ye(e),s=m(t),o=l(f(l({},s.query),{f:"json"}),i),a=e.geometries[0].spatialReference,c=T(o,r);return p(s.path+"/offset",c).then(({data:u})=>(u.geometries||[]).map(g=>I(g).set({spatialReference:a})))}let O=class extends w{constructor(t){super(t),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};N([y({json:{read:{reader:t=>t?t.map(e=>I(e)):null},write:{writer:(t,e)=>{e.geometries1=t.map(r=>r.toJSON())}}}})],O.prototype,"geometries1",void 0),N([y({json:{read:{reader:t=>t?t.map(e=>I(e)):null},write:{writer:(t,e)=>{e.geometries2=t.map(r=>r.toJSON())}}}})],O.prototype,"geometries2",void 0),N([y({type:String,json:{write:!0}})],O.prototype,"relation",void 0),N([y({type:String,json:{write:!0}})],O.prototype,"relationParameter",void 0),O=N([A("esri.rest.support.RelationParameters")],O),O.from=J(O);const Te=O,Ie=new h({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});function ge(t){const{geometries1:e,geometries2:r,relation:i,relationParameter:s}=t.toJSON(),o={};if(e&&e.length){o.geometries1=JSON.stringify({geometryType:_(e[0]),geometries:e});const a=e[0].spatialReference;o.sr=a.wkid?a.wkid:JSON.stringify(a)}return r&&r.length>0&&(o.geometries2=JSON.stringify({geometryType:_(r[0]),geometries:r})),i&&(o.relation=Ie.toJSON(i)),s&&(o.relationParam=s),o}async function de(t,e,r){e=Te.from(e);const i=ge(e),s=m(t),o=l(f(l({},s.query),{f:"json"}),i),a=T(o,r);return p(s.path+"/relation",a).then(({data:c})=>c.relations)}async function _e(t,e,r,i){const s=e.spatialReference,o=m(t),a=f(l({},o.query),{f:"json",sr:JSON.stringify(s.toJSON()),target:JSON.stringify({geometryType:_(e),geometry:e.toJSON()}),reshaper:JSON.stringify(r.toJSON())}),c=T(a,i);return p(o.path+"/reshape",c).then(({data:u})=>I(u.geometry).set({spatialReference:s}))}async function Se(t,e,r){const i=typeof t=="string"?Y(t):t,s=e[0].spatialReference,o=_(e[0]),a=f(l({},r),{query:f(l({},i.query),{f:"json",sr:s.wkid?s.wkid:JSON.stringify(s),geometries:JSON.stringify(E(e))})}),{data:c}=await p(i.path+"/simplify",a);return K(c.geometries,o,s)}async function Oe(t,e,r){const i={};e.sr!=null&&typeof e.sr=="object"?i.sr=e.sr.wkid||JSON.stringify(e.sr):i.sr=e.sr,i.coordinates=JSON.stringify(e.coordinates);const s=e.conversionType||"mgrs";i.conversionType=M.toJSON(s),i.conversionMode=e.conversionMode,i.numOfDigits=e.numOfDigits,i.rounding=e.rounding,i.addSpaces=e.addSpaces;const o=m(t),a=l(f(l({},o.query),{f:"json"}),i),c=T(a,r);return p(o.path+"/toGeoCoordinateString",c).then(({data:u})=>u.strings)}let U=class extends w{constructor(t){super(t),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};N([y({type:String,json:{write:!0}})],U.prototype,"extendHow",void 0),N([y({type:[j],json:{read:{reader:t=>t?t.map(e=>I(e)):null},write:{writer:(t,e)=>{e.polylines=t.map(r=>r.toJSON())}}}})],U.prototype,"polylines",void 0),N([y({json:{read:{reader:t=>t?I(t):null},write:{writer:(t,e)=>{e.trimExtendTo=t.toJSON()}}}})],U.prototype,"trimExtendTo",void 0),U=N([A("esri.rest.support.TrimExtendParameters")],U),U.from=J(U);const Re=U,Ue=new h({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});function he(t){const{extendHow:e,polylines:r,trimExtendTo:i}=t.toJSON(),s={};return s.extendHow=Ue.toJSON(e),r&&r.length&&(s.polylines=JSON.stringify(r),s.sr=JSON.stringify(r[0].spatialReference)),i&&(s.trimExtendTo=JSON.stringify(i)),s}async function Ee(t,e,r){e=Re.from(e);const i=he(e),s=m(t),o=l(f(l({},s.query),{f:"json"}),i),a=e.sr,c=T(o,r);return p(s.path+"/trimExtend",c).then(({data:u})=>(u.geometries||[]).map(({paths:g})=>new j({spatialReference:a,paths:g})))}async function Ae(t,e,r){const i=e[0].spatialReference,s=m(t),o=f(l({},s.query),{f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(E(e))}),a=T(o,r);return p(s.path+"/union",a).then(({data:c})=>I(c.geometry).set({spatialReference:i}))}let n=class extends F{constructor(t){super(t),this.url=null}areasAndLengths(t,e){return k(this.url,t,e)}autoComplete(t,e,r){return P(this.url,t,e,r)}buffer(t,e){return Q(this.url,t,e)}convexHull(t,e){return V(this.url,t,e)}cut(t,e,r){return z(this.url,t,e,r)}densify(t,e){return W(this.url,t,e)}difference(t,e,r){return X(this.url,t,e,r)}distance(t,e){return Z(this.url,t,e)}fromGeoCoordinateString(t,e){return ee(this.url,t,e)}generalize(t,e){return se(this.url,t,e)}intersect(t,e,r){return ie(this.url,t,e,r)}labelPoints(t,e){return oe(this.url,t,e)}lengths(t,e){return ue(this.url,t,e)}offset(t,e){return me(this.url,t,e)}project(t,e){return B(this.url,t,e)}relation(t,e){return de(this.url,t,e)}reshape(t,e,r){return _e(this.url,t,e,r)}simplify(t,e){return Se(this.url,t,e)}toGeoCoordinateString(t,e){return Oe(this.url,t,e)}trimExtend(t,e){return Ee(this.url,t,e)}union(t,e){return Ae(this.url,t,e)}};n.UNIT_METER=9001,n.UNIT_GERMAN_METER=9031,n.UNIT_FOOT=9002,n.UNIT_SURVEY_FOOT=9003,n.UNIT_CLARKE_FOOT=9005,n.UNIT_FATHOM=9014,n.UNIT_NAUTICAL_MILE=9030,n.UNIT_SURVEY_CHAIN=9033,n.UNIT_SURVEY_LINK=9034,n.UNIT_SURVEY_MILE=9035,n.UNIT_KILOMETER=9036,n.UNIT_CLARKE_YARD=9037,n.UNIT_CLARKE_CHAIN=9038,n.UNIT_CLARKE_LINK=9039,n.UNIT_SEARS_YARD=9040,n.UNIT_SEARS_FOOT=9041,n.UNIT_SEARS_CHAIN=9042,n.UNIT_SEARS_LINK=9043,n.UNIT_BENOIT_1895A_YARD=9050,n.UNIT_BENOIT_1895A_FOOT=9051,n.UNIT_BENOIT_1895A_CHAIN=9052,n.UNIT_BENOIT_1895A_LINK=9053,n.UNIT_BENOIT_1895B_YARD=9060,n.UNIT_BENOIT_1895B_FOOT=9061,n.UNIT_BENOIT_1895B_CHAIN=9062,n.UNIT_BENOIT_1895B_LINK=9063,n.UNIT_INDIAN_FOOT=9080,n.UNIT_INDIAN_1937_FOOT=9081,n.UNIT_INDIAN_1962_FOOT=9082,n.UNIT_INDIAN_1975_FOOT=9083,n.UNIT_INDIAN_YARD=9084,n.UNIT_INDIAN_1937_YARD=9085,n.UNIT_INDIAN_1962_YARD=9086,n.UNIT_INDIAN_1975_YARD=9087,n.UNIT_FOOT_1865=9070,n.UNIT_RADIAN=9101,n.UNIT_DEGREE=9102,n.UNIT_ARCMINUTE=9103,n.UNIT_ARCSECOND=9104,n.UNIT_GRAD=9105,n.UNIT_GON=9106,n.UNIT_MICRORADIAN=9109,n.UNIT_ARCMINUTE_CENTESIMAL=9112,n.UNIT_ARCSECOND_CENTESIMAL=9113,n.UNIT_MIL6400=9114,n.UNIT_BRITISH_1936_FOOT=9095,n.UNIT_GOLDCOAST_FOOT=9094,n.UNIT_INTERNATIONAL_CHAIN=109003,n.UNIT_INTERNATIONAL_LINK=109004,n.UNIT_INTERNATIONAL_YARD=109001,n.UNIT_STATUTE_MILE=9093,n.UNIT_SURVEY_YARD=109002,n.UNIT_50KILOMETER_LENGTH=109030,n.UNIT_150KILOMETER_LENGTH=109031,n.UNIT_DECIMETER=109005,n.UNIT_CENTIMETER=109006,n.UNIT_MILLIMETER=109007,n.UNIT_INTERNATIONAL_INCH=109008,n.UNIT_US_SURVEY_INCH=109009,n.UNIT_INTERNATIONAL_ROD=109010,n.UNIT_US_SURVEY_ROD=109011,n.UNIT_US_NAUTICAL_MILE=109012,n.UNIT_UK_NAUTICAL_MILE=109013,n.UNIT_SQUARE_INCHES="esriSquareInches",n.UNIT_SQUARE_FEET="esriSquareFeet",n.UNIT_SQUARE_YARDS="esriSquareYards",n.UNIT_ACRES="esriAcres",n.UNIT_SQUARE_MILES="esriSquareMiles",n.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",n.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",n.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",n.UNIT_SQUARE_METERS="esriSquareMeters",n.UNIT_ARES="esriAres",n.UNIT_HECTARES="esriHectares",n.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",N([y()],n.prototype,"url",void 0),n=N([A("esri.tasks.GeometryService")],n);const je=n;export{je as default};
