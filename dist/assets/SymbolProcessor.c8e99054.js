var K=Object.defineProperty;var w=Object.getOwnPropertySymbols;var U=Object.prototype.hasOwnProperty,F=Object.prototype.propertyIsEnumerable;var j=(t,e,s)=>e in t?K(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s,T=(t,e)=>{for(var s in e||(e={}))U.call(e,s)&&j(t,s,e[s]);if(w)for(var s of w(e))F.call(e,s)&&j(t,s,e[s]);return t};import{h as k,s as E,X as L,Z as P,bN as $,fg as A,d as O,k as _,aO as B,bm as b,b as M,r as v,gR as z,fn as V,bp as G}from"./vendor.1906794a.js";import{n as N}from"./CIMSymbolHelper.96d440ee.js";import{p as Z}from"./visualVariablesUtils.c887ba43.js";import{j as q,o as x,l as H,E as J,t as W}from"./Matcher.a4434050.js";import{p as X}from"./BaseProcessor.ee11ad30.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./Utils.dc5734bd.js";import"./Texture.e5002286.js";import"./GeometryUtils.d4e26b77.js";import"./visualVariablesUtils.a2feeb91.js";import"./tileUtils.38de3c83.js";import"./TileClipper.37214276.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.301bf49f.js";import"./cimSymbolUtils.6ee77631.js";import"./quantizationUtils.f38724ee.js";import"./devEnvironmentUtils.444b8fd1.js";import"./earcut.f20dd8d8.js";class Q{constructor(e){this._remoteClient=e,this._resourceMap=new Map,this._inFlightResourceMap=new Map}destroy(){}async fetchResource(e,s){const r=this._resourceMap,i=r.get(e);if(i)return i;let a=this._inFlightResourceMap.get(e);if(a)return a;try{a=this._remoteClient.invoke("tileRenderer.fetchResource",{url:e},T({},s)),this._inFlightResourceMap.set(e,a),a.then(o=>(this._inFlightResourceMap.delete(e),r.set(e,o),o))}catch(o){return k(o)?null:{width:0,height:0}}return a}getResource(e){var s;return(s=this._resourceMap.get(e))!=null?s:null}}function C(t,e){return(!t.minScale||t.minScale>=e)&&(!t.maxScale||t.maxScale<=e)}function D(t){const e=t.message,s={message:{data:{},tileKey:e.tileKey,tileKeyOrigin:e.tileKeyOrigin},transferList:new Array};for(const r in e.data){const i=e.data[r];if(s.message.data[r]=null,v(i)){const a=i.stride,o=i.indices.slice(0),l=i.vertices.slice(0),d=i.records.slice(0),h={stride:a,indices:o,vertices:l,records:d,metrics:b(i.metrics,n=>n.slice(0))};s.transferList.push(o,l,d),s.message.data[r]=h}}return s}E.getLogger("esri.views.2d.layers.features.processors.SymbolProcessor");let S=class extends X{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map,this._bufferIds=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))]),this._resourceManagerProxy=new Q(this.remoteClient)}destroy(){this._resourceManagerProxy.destroy()}get supportsTileUpdates(){return!0}forEachBufferId(t){this._bufferIds.forEach(e=>{e.forEach(t)})}async update(t,e){const s=e.schema.processors[0];if(s.type!=="symbol")return;const r=$(this._schema,s);A(r,"mesh")&&(O("esri-2d-update-debug")&&console.debug("Applying Update - Processor:",r),t.mesh=!0,t.why.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo))}onTileMessage(t,e,s,r){return _(r),this._onTileData(t,e,s,r)}onTileClear(t){const e={clear:!0};return this._bufferData.delete(t.key.id),this._bufferIds.delete(t.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:e})}onTileError(t,e,s){const r=s.signal,i={tileKey:t.id,error:e};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:r})}onTileUpdate(t){for(const e of t.removed)this._bufferData.has(e.key.id)&&this._bufferData.delete(e.key.id),this._bufferIds.has(e.key.id)&&this._bufferIds.delete(e.key.id);for(const e of t.added)this._bufferData.forEach(s=>{for(const r of s)r.message.tileKey===e.id&&this._updateTileMesh("append",e,D(r),[],!1,!1,null)})}_addBufferData(t,e){this._bufferData.has(t)||this._bufferData.set(t,[]),this._bufferData.get(t).push(D(e))}_createFactory(t){const{geometryType:e,objectIdField:s,fields:r}=this.service,i=(h,n)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",h,n),a={geometryType:e,fields:r,spatialReference:B.fromJSON(this.spatialReference)},o=new q(i,this.tileStore.tileScheme.tileInfo),{matcher:l,aggregateMatcher:d}=t.mesh;return this._store=o,this._matchers.feature=x(l,o,a,this._resourceManagerProxy),this._matchers.aggregate=b(d,h=>x(h,o,a,this._resourceManagerProxy)),new H(e,s,o)}async _onTileData(t,e,s,r){_(r);const{type:i,addOrUpdate:a,remove:o}=e,l=e.end,d=!!this._schema.mesh.sortKey;if(!a){const n={type:i,addOrUpdate:null,remove:o,clear:!1,end:l,sort:d};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:n},r)}const h=this._processFeatures(t,a,s,r);try{const n=await h;if(M(n)){const c={type:i,addOrUpdate:null,remove:o,clear:!1,end:l,sort:d};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:c},r)}const u=[];for(const c of n){let f=!1;const m=c.message.bufferIds,p=t.key.id,g=c.message.tileKey;if(p!==g&&v(m)){if(!this.tileStore.get(g)){this._addBufferData(p,c),u.push(c);continue}let y=this._bufferIds.get(g);y||(y=new Set,this._bufferIds.set(g,y));const R=Array.from(m);for(const I of R){if(y.has(I)){f=!0;break}y.add(I)}}f||(this._addBufferData(p,c),u.push(c))}await z(u.map(c=>{const f=t.key.id===c.message.tileKey,m=f?e.remove:[],p=f&&e.end;return this._updateTileMesh(i,t,c,m,p,e.clear,r.signal)}))}catch(n){this._handleError(t,n,r)}}async _updateTileMesh(t,e,s,r,i,a,o){const l=t,d=s.message.tileKey,h=!!this._schema.mesh.sortKey;d!==e.key.id&&(i=!1);const n=b(s,m=>m.message),u=b(s,m=>m.transferList)||[],c={type:l,addOrUpdate:n,remove:r,clear:!1,end:i,sort:h},f={transferList:G(u)||[],signal:o};return _(f),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:d,data:c},f)}async _processFeatures(t,e,s,r){if(M(e)||!e.hasFeatures)return null;const i={transform:t.transform,hasZ:!1,hasM:!1},a=this._factory,o={viewingMode:"",scale:t.scale},l=await this._matchers.feature,d=await this._matchers.aggregate;_(r);const h=this._getLabelInfos(t,e);return await a.analyze(e.getCursor(),this._resourceManagerProxy,l,d,i,o),_(r),this._writeFeatureSet(t,e,i,h,a,s)}_writeFeatureSet(t,e,s,r,i,a){const o=e.getSize(),l=new J(t.key.id,{features:o,records:o,metrics:0},this._schema.mesh.matcher.stride,a,!0),d={viewingMode:"",scale:t.scale},h=e.getCursor();for(;h.next();)try{const u=h.getDisplayId(),c=v(r)?r.get(u):null;i.writeCursor(l,h,s,d,t.level,c)}catch{}const n=t.tileInfoView.tileInfo.isWrappable;return l.serialize(n)}_handleError(t,e,s){if(!k(e)){const r={tileKey:t.id,error:e.message};return this.remoteClient.invoke("tileRenderer.onTileError",r,{signal:s.signal})}}_getLabelingSchemaForScale(t){const e=this._schema.mesh.labels;if(M(e))return null;if(e.type==="subtype"){const r={type:"subtype",classes:{}};let i=!1;for(const a in e.classes){const o=e.classes[a].filter(l=>C(l,t.scale));i=i||!!o.length,r.classes[a]=o}return i?r:null}const s=e.classes.filter(r=>C(r,t.scale));return s.length?{type:"simple",classes:s}:null}_getLabels(t,e){if(e.type==="subtype"){var s;const r=this.service.subtypeField,i=V(r,"Expected to find subtype Field"),a=t.readAttribute(i);return a==null?[]:(s=e.classes[a])!=null?s:[]}return e.classes}_getLabelInfos(t,e){const s=this._getLabelingSchemaForScale(t);if(M(s))return null;const r=new Map,i=e.getCursor();for(;i.next();){const a=i.getDisplayId(),o=[],l=Z(a),d=l&&i.readAttribute("cluster_count")!==1?"aggregate":"feature",h=this._getLabels(i,s);for(const n of h){if(n.target!==d)continue;const u=i.getStorage(),c=l&&d==="feature"?u.getComputedStringAtIndex(i.readAttribute("referenceId"),n.fieldIndex):u.getComputedStringAtIndex(a,n.fieldIndex);if(!c)continue;const f=N(c.toString()),m=f[0],p=f[1];this._store.getMosaicItem(n.symbol,W(m)).then(g=>{o[n.index]={glyphs:g.glyphMosaicItems,rtl:p,index:n.index}})}r.set(a,o)}return r}};S=L([P("esri.views.2d.layers.features.processors.SymbolProcessor")],S);const be=S;export{be as default};
