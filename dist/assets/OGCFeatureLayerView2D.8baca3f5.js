import{X as s,Y as r,Z as a,e as p}from"./vendor.1906794a.js";import m from"./FeatureLayerView2D.b2272e26.js";import"./Container.3129b529.js";import"./drapedUtils.11fab57e.js";import"./definitions.21e97413.js";import"./LayerView.31466adc.js";import"./schemaUtils.a83c8525.js";import"./Utils.dc5734bd.js";import"./Texture.e5002286.js";import"./MaterialKey.301bf49f.js";import"./visualVariablesUtils.a2feeb91.js";import"./CIMSymbolHelper.96d440ee.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./cimSymbolUtils.6ee77631.js";import"./quantizationUtils.f38724ee.js";import"./devEnvironmentUtils.444b8fd1.js";import"./MD5.f9440c6b.js";import"./util.aa5f648b.js";import"./popupUtils.10e4a4b8.js";import"./RefreshableLayerView.cc10fb38.js";const n=o=>{let e=class extends o{initialize(){const{layer:i,view:l}=this;i.source.supportsSpatialReference(l.spatialReference)||this.addResolvingPromise(Promise.reject(new p("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:i})))}get availableFields(){return this.layer.fieldsIndex.fields.map(i=>i.name)}};return s([r()],e.prototype,"layer",void 0),s([r({readOnly:!0})],e.prototype,"availableFields",null),e=s([a("esri.views.layers.OGCFeatureLayerView")],e),e};let t=class extends n(m){};t=s([a("esri.views.2d.layers.OGCFeatureLayerView2D")],t);const M=t;export{M as default};
